beta0 <- 400
im.aligned <- image2proc(Im0=im1, L0=semi.out.ldk[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
# scaler
beta0 <- 100
im.aligned <- image2proc(Im0=im1, L0=semi.out.ldk[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
# scaler
beta0 <- 1000
im.aligned <- image2proc(Im0=im1, L0=semi.out.ldk[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
# scaler
beta0 <- 2000
im.aligned <- image2proc(Im0=im1, L0=semi.out.ldk[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
im.aligned$coordLandm
im.aligned$imageProc
im.aligned <- image2proc(Im0=im1, L0=semi.out.im2[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
# scaler
beta0 <- 3000
im.aligned <- image2proc(Im0=im1, L0=semi.out.im2[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
# scaler
beta0 <- 4000
im.aligned <- image2proc(Im0=im1, L0=semi.out.im2[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
# scaler
beta0 <- 400
im.aligned <- image2proc(Im0=im1, L0=semi.out.im2[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
# scaler
beta0 <- 4000
im.aligned <- image2proc(Im0=im1, L0=semi.out.im2[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
file
file.base <- file.list[1]
file <- file.path(dirs[['path']], dirs[['dir.im']], paste0(file.base, dirs[['file.im']]) )
file.base <- file.list[1]
file <- file.path(dirs[['path']], dirs[['dir.im']], paste0(file.base, dirs[['file.im']]) )
im1 <- load.image(file)
file.base <- file.list[2]
file <- file.path(dirs[['path']], dirs[['dir.im']], paste0(file.base, dirs[['file.im']]) )
im2 <- load.image(file)
plot(im1)
plot(im2)
file.base1 <- file.list[1]
file1 <- file.path(dirs[['path']], dirs[['dir.im']], paste0(file.base1, dirs[['file.im']]) )
file.base2 <- file.list[2]
file2 <- file.path(dirs[['path']], dirs[['dir.im']], paste0(file.base2, dirs[['file.im']]) )
im1 <- load.image(file1)
im2 <- load.image(file2)
plot(im1)
plot(im2)
plot(im1, main = file1)
plot(im2, main = file2)
hei=height(im1)
plot(im1, main = file1)
points(semi.out.ldk[,,file.base1])
hei=height(im1)
semi.out.im <-im2car(semi.out.ldk, hei)
plot(im1)
points(semi.out.im[,,file.base1])
M.coor
negateY <- function(ldk){
M.coor <- matrix(c(1,0, 0,-1), 2, 2)
ldk.new <- apply(ldk, 3, function(x) x %*% M.coor) %>% array(., dim(ldk))
dimnames(ldk.new)[3] <- dimnames(ldk)[3]
return(ldk.new)
}
plot(im1)
points(semi.out.im[,,file.base1])
plot(im1)
points(semi.out.im[,,file.base1])
ldk.new <- semi.out.ldk %>% im2car(., hei)
ldk.new <- semi.out.ldk %>% im2car(., hei) %>% negateY
ldk.new
# cartesian normalized center
out.ctr <- c(round(width(im1)/2, 0), -round(height(im1)/2, 0))
# scaler
beta0 <- 4000
file.base
im.aligned <- image2proc(Im0=im1, L0=ldk.new[,,file.base1], LP=gpag$coords[,,file.base1],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
plot(im1, main = file1)
points(semi.out.ldk[,,file.base1])
# parameters -------------
file.list  # files to go through obtained from stereo obj
dirs # directories see main.R
gpag # Procrustes ldk #gpag <- gpagen(semi.out.ldk, ProcD = F, max.iter = 50)
semi.out.ldk # original postprocessed outlines see main.R
file.base1 <- file.list[1]
file.base2 <- file.list[2]
plot(im1)
im2car(semi.out.ldk[,,file.base1], hei) %>% points
# Transform original ldk to make L0
L0.all <- ldk.new <- semi.out.ldk %>% im2car(., hei) %>% negateY
L0.all
gpag
out.ctr <- c(round(width(im1)/2, 0), -round(height(im1)/2, 0)) # cartesian normalized center
beta0 <- 4000 # scaler
# Image 1
im.aligned <- image2proc(Im0=im1, L0=L0.all[,,file.base1], LP=gpag$coords[,,file.base1],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
beta0 <- 5000 # scaler
# Image 1
im.aligned <- image2proc(Im0=im1, L0=L0.all[,,file.base1], LP=gpag$coords[,,file.base1],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
beta0 <- 4000 # scaler
# Image 1
im.aligned <- image2proc(Im0=im1, L0=L0.all[,,file.base1], LP=gpag$coords[,,file.base1],
beta0=beta0, output.center=out.ctr)
plot(im.aligned$imageProc)
points(im.aligned$coordLandm, col='red')
# Image 2
im.aligned2 <- image2proc(Im0=im2, L0=L0.all[,,file.base2], LP=gpag$coords[,,file.base2],
beta0=beta0, output.center=out.ctr)
plot(im.aligned2$imageProc)
points(im.aligned2$coordLandm, col='red')
# Plot together Im1, Im2
imdraw(im.aligned$imageProc, im.aligned2$imageProc, opacity = .3) %>% plot
points(im.aligned$coordLandm, col='red')
points(im.aligned2$coordLandm, col='blue')
# Plot together Im1, Im2
imdraw(im.aligned$imageProc, im.aligned2$imageProc, opacity = .3) %>% plot
lines(im.aligned$coordLandm, col='red')
lines(im.aligned2$coordLandm, col='blue')
# read images
imappend(list(boats,boats),"x") %>% plot
im1 <- as.cimg(function(x,y) x,50,50)
im2 <- as.cimg(function(x,y) y,50,50)
im3 <- as.cimg(function(x,y) cos(x/10),50,50)
l <- imlist(im1,im2,im3)
l
# read images
l <- imlist()
l
dirs[['path']]
dirs[['dir.im']]
dirs[['dir.im']]
files <- file.path(dirs[['path']], dirs[['dir.im']])
files
load.dir(path=files, pattern = NULL, quiet = FALSE)
im.list <- load.dir(path=files, pattern = NULL, quiet = FALSE)
str(im.list)
# read images in path
files <- file.path(dirs[['path']], dirs[['dir.im']])
im.list <- load.dir(path=files, pattern = NULL, quiet = FALSE)
str(im.list)
str(im.aligned)
Im0.list <- im.list
n.im <- length(Im0.list)
n.im
cat(paste0('Processing N(images)=', n.im, '/n'))
cat(paste0('Processing N(images)=', n.im, '\n'))
i=1
files
gpag$coords
names(gpag$coords)
gpag$coords
L0.array <- gpag$coords
LP.array <- gpag$coords
Im0.list <- im.list
L0.array <- L0.all
LP.array <- gpag$coords
n.im <- length(Im0.list)
dimnames(gpag$coords)
dimnames(gpag$coords)[[3]]
dimnames(L0.array)[[3]]
dimnames(LP.array)[[3]]
names(Im0.list)
cat(names(Im0.list))
cat(names(Im0.list), sep=' ')
cat(paste0(names(Im0.list), collapse = ' '))
cat(paste0(names(Im0.list), collapse = ' '), '\n')
cat(paste0(names(Im0.list), collapse = ' '), '\n')
cat(paste0('Processing N(images)=', n.im, '\n'))
cat(paste0(names(Im0.list), collapse = ' '), '\n')
n2=dimnames(L0.array)[[3]]
n3=dimnames(LP.array)[[3]]
n1=names(Im0.list)
n2=dimnames(L0.array)[[3]]
n3=dimnames(LP.array)[[3]]
n1==n2
n1
n2
n3
Im0.list[[i]]
L0.array[,,1]
i=1
i=1
im.aligned <- image2proc(Im0=Im0.list[[i]], L0=L0.array[,,i], LP=LP.array[,,i],
beta0=beta0, output.center=output.center)
output.center=out.ctr
im.aligned <- image2proc(Im0=Im0.list[[i]], L0=L0.array[,,i], LP=LP.array[,,i],
beta0=beta0, output.center=output.center)
str(im.aligned)
# Image 1
aligned <- image2proc(Im0=im1, L0=L0.all[,,file.base], LP=gpag$coords[,,file.base],
beta0=beta0, output.center=out.ctr)
ali <- image2proc(Im0=Im0.list[[i]], L0=L0.array[,,i], LP=LP.array[,,i],
beta0=beta0, output.center=output.center)
aligned1 <- image2proc(Im0=Im0.list[[i]], L0=L0.array[,,i], LP=LP.array[,,i],
beta0=beta0, output.center=output.center)
aligned1$imageProc
aligned1$coordLandm
IM <- imlist(...)
IM <- imlist()
IM
IM[[i]] <- aligned1$imageProc
IM
aligned1$coordLandm
CR <- array()
CR[,,i] <- aligned1$coordLandm
CR
CR <- array()
abind(CR, aligned1$coordLandm, along=3)
CR <- c()
abind(CR, aligned1$coordLandm, along=3)
CR <-abind(CR, aligned1$coordLandm, along=3)
CR <-abind(CR, aligned1$coordLandm, along=3)
CR
IM
names(IM)
# n1=names(Im0.list)
n2=dimnames(L0.array)[[3]]
n2
dimnames(CR)
dimnames(CR)[[3]]
n.im <- length(Im0.list)
cat(paste0('Processing N(images)=', n.im, '\n'))
cat(paste0(names(Im0.list), collapse = ' '), '\n')
# n1=names(Im0.list)
n2=dimnames(L0.array)[[3]]
IM <- imlist()
CR <- c()
for (i in 1:n.im){
aligned1 <- image2proc(Im0=Im0.list[[i]], L0=L0.array[,,i], LP=LP.array[,,i],
beta0=beta0, output.center=output.center)
IM[[i]] <- aligned1$imageProc
CR <-abind(CR, aligned1$coordLandm, along=3)
}
cat(paste0('Processing Image ', i, '\n'))
names(IM) <- n2
dimnames(CR)[[3]]<- n2
IM
CR
image2procMulti <- function(Im0.list, L0.array, LP.array, beta0, output.center){
n.im <- length(Im0.list)
cat(paste0('Processing N(images)=', n.im, '\n'))
cat(paste0(names(Im0.list), collapse = ' '), '\n')
# n1=names(Im0.list)
n2=dimnames(L0.array)[[3]]
# n3=dimnames(LP.array)[[3]]
IM <- imlist()
CR <- c()
i=1
for (i in 1:n.im){
cat(paste0('Processing Image ', i, '\n'))
aligned1 <- image2proc(Im0=Im0.list[[i]], L0=L0.array[,,i], LP=LP.array[,,i],
beta0=beta0, output.center=output.center)
IM[[i]] <- aligned1$imageProc
CR <-abind(CR, aligned1$coordLandm, along=3)
}
names(IM) <- n2
dimnames(CR)[[3]]<- n2
out <- list(imageProc=IM, coordLandm=CR)
return(out)
}
image2procMulti(Im0.list=im.list, L0.array=L0.all, LP.array=gpag$coords, beta0=beta0, output.center=out.ctr)
im.ali <- image2procMulti(Im0.list=im.list, L0.array=L0.all, LP.array=gpag$coords, beta0=beta0, output.center=out.ctr)
plot(im.ali$imageProc[[1]])
lines(im.ali$coordLandm[[1]], col='red')
lines(im.ali$coordLandm[,,1], col='red')
i=2
plot(im.ali$imageProc[[i]])
lines(im.ali$coordLandm[,,i], col='red')
i=3
plot(im.ali$imageProc[[i]])
lines(im.ali$coordLandm[,,i], col='red')
i=4
plot(im.ali$imageProc[[i]])
lines(im.ali$coordLandm[,,i], col='red')
im1 <- im.list[[1]]
out.ctr <- c(round(width(im1)/2, 0), -round(height(im1)/2, 0)) # cartesian normalized center
beta0 <- 4000 # scaler
rstudioapi::navigateToFile("R/Image2Proc.R")
project.dir <- getwd()
source('R/dependencies.R')
stereo.ldk <- readRDS('data/stereo_ldk/stereo.ldk.RDS') # read stereo landmarks
file.list <- strsplit(names(stereo.ldk), '_im.txt') %>% unlist  # files to go through obtained from stereo obj
reorder.ldk <- 1                                                # reorder outlines given first ldk
imh <- load.image('data/im/viridans_im.JPG')                    # image height, use the first image
hei=height(imh)                                                 # image height, use the first image
dirs <- list(
file.im= '_im.JPG',    # image files extension
file.out='_out.JPG',   # outline files extension
file.stereo='_im.txt', # stereo files extension
dir.im='im',           # image folder in 'path'
dir.out='out',         # outline folder in 'path'
path = 'data'          # path to data
)
dt <- readOutlines2(file.list, dirs, stereo.ldk, hei, reorder.ldk=1)
str(dt)
# save
#saveRDS(semi.ldk0, 'data/saved/semi.ldk0.RDS')
# read
readRDS('data/saved/semi.ldk0.RDS')
semi.ldk0
# save
#saveRDS(semi.ldk0, 'data/saved/semi.ldk0.RDS')
# read
semi.ldk0 <- readRDS('data/saved/semi.ldk0.RDS')
# translate to Momocs object, outline + 1st ldk
semi.out <- Momocs::Out(semi.ldk0, ldk=as.list(rep(1,dim(semi.ldk0)[3])))
names(semi.out) <- dimnames(semi.ldk0)[[3]]
# translate to Momocs object, outline + 1st ldk
semi.out <- Momocs::Out(semi.ldk0, ldk=as.list(rep(1,dim(semi.ldk0)[3])))
names(semi.out) <- dimnames(semi.ldk0)[[3]]
semi.out
# Plot outlines and ldk
semi.out %>% panel(names=TRUE, points=T)
semi.out %>%
coo_center %>% coo_scale %>%
coo_alignxax() %>% coo_slidedirection("up") %T>%
print() %>% stack()
# semi.ldk0 # original sampled ldk array
semi.out  # Momocs outline obj
semi.out.ldk <- semi.out %$% l2a(coo) # Momocs outline obj -> back to ldk array
semi.ldk <- Ldk(coo=semi.ldk0 %>% a2l) # Momocs ldk
# Procrustes superimposition using different methods
# using package geomorph
gpag <- gpagen(semi.out.ldk, ProcD = F, max.iter = 50)
# using package  Momocs
fgProc <- fgProcrustes(semi.ldk)
# using package Morpho
procSy <- procSym(semi.out.ldk, reflect = FALSE)
plot(gpag)
Ldk(coo=gpag$coords %>% a2l) %>% panel()
Ldk(coo=gpag$coords %>% a2l) %>% stack()
fgProc %>% Out %>% stack()
fgProc %>% panel()
Ldk(coo=procSy$rotated %>% a2l) %>% Out %>% stack()
Ldk(coo=procSy$rotated %>% a2l) %>% panel()
rstudioapi::navigateToFile("R/Image2Proc.R")
#---------- parameters:
file.list  # files to go through obtained from stereo obj
dirs # directories see main.R
gpag # Procrustes ldk #gpag <- gpagen(semi.out.ldk, ProcD = F, max.iter = 50)
semi.out.ldk # original postprocessed outlines see main.R
# Transform original ldk to make L0 given compatible for alignment
L0.all <- ldk.new <- semi.out.ldk %>% im2car(., hei) %>% negateY
# read all images in path
files <- file.path(dirs[['path']], dirs[['dir.im']])
im.list <- load.dir(path=files, pattern = NULL, quiet = FALSE)
str(im.list)
im1 <- im.list[[1]]
out.ctr <- c(round(width(im1)/2, 0), -round(height(im1)/2, 0)) # cartesian normalized center
beta0 <- 4000 # scaler
# multiple alignment
im.ali <- image2procMulti(Im0.list=im.list, L0.array=L0.all, LP.array=gpag$coords, beta0=beta0, output.center=out.ctr)
plot(im.ali$imageProc[[i]])
# Plot
i=4
plot(im.ali$imageProc[[i]])
lines(im.ali$coordLandm[,,i], col='red')
# Plot superimpose
imdraw(im.ali$imageProc[[1]], im.ali$imageProc[[2]], opacity = .3) %>% plot
lines(im.ali$imageProc[[1]], col='red')
lines(im.ali$coordLandm[,,1], col='red')
# Plot superimpose
imdraw(im.ali$imageProc[[1]], im.ali$imageProc[[2]], opacity = .3) %>% plot
im.ali$coordLandm[,,1]
lines(im.ali$coordLandm[,,1] %>% as.matrix(), col='red')
lines(im.ali$coordLandm[,,2] %>% as.matrix(), col='blue')
saveRDS(im.ali, 'data/saved/im.ali.RDS')
install.packages("here")
library(here)
project.dir <- getwd()
project.dir
source('R/dependencies.R')
project.dir <- getwd()
source('R/dependencies.R')
project.dir <- getwd()
project.dir
source('R/dependencies.R')
# Go to the respective script
rstudioapi::navigateToFile("R/stereoMorph.R")
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
project.dir <- getwd()
source('R/dependencies.R')
# Go to the respective script
rstudioapi::navigateToFile("R/stereoMorph.R")
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
project.dir <- getwd()
project.dir <- getwd()
project.dir <- getwd()
project.dir
source('R/dependencies.R')
rstudioapi::navigateToFile("Ai/README_Ai.txt")
# Go to the respective script
rstudioapi::navigateToFile("R/stereoMorph.R")
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
rm(ldk)
ldk <- importSM(path='data/stereo_ldk/stereo_output', class = c('Ldk'), panel = TRUE)
str(ldk)
Momocs::get_ldk(ldk)
stereo.ldk <- Momocs::get_ldk(ldk)
# write imported ldks to file
saveRDS(stereo.ldk, 'data/stereo_ldk/stereo.ldk.RDS')
View(image2proc)
View(image2proc)
View(importSM)
View(readOutlines1)
stereo.ldk <- readRDS('data/stereo_ldk/stereo.ldk.RDS') # read stereo landmarks
stereo.ldk
stereo.ldk <- readRDS('data/stereo_ldk/stereo.ldk.RDS') # read stereo landmarks
# Go to the respective script
rstudioapi::navigateToFile("R/stereoMorph.R")
rm(ldk)
ldk <- importSM(path='data/stereo_ldk/stereo_output', class = c('Ldk'), panel = TRUE)
str(ldk)
Momocs::get_ldk(ldk)
stereo.ldk <- Momocs::get_ldk(ldk)
# write imported ldks to file
saveRDS(stereo.ldk, 'data/stereo_ldk/stereo.ldk.RDS')
rm(ldk)
ldk <- importSM(path='data/stereo_ldk/stereo_output', class = c('Ldk'), panel = TRUE)
str(ldk)
Momocs::get_ldk(ldk)
stereo.ldk <- Momocs::get_ldk(ldk)
# write imported ldks to file
saveRDS(stereo.ldk, 'data/stereo_ldk/stereo.ldk.RDS')
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
rm(ldk)
ldk <- importSM(path='data/stereo_ldk/stereo_output', class = c('Ldk'), panel = TRUE)
str(ldk)
Momocs::get_ldk(ldk)
stereo.ldk <- Momocs::get_ldk(ldk)
# write imported ldks to file
saveRDS(stereo.ldk, 'data/stereo_ldk/stereo.ldk.RDS')
# write imported ldks to file
saveRDS(stereo.ldk, 'data/stereo_ldk/stereo.ldk.RDS')
stereo.ldk <- readRDS('data/stereo_ldk/stereo.ldk.RDS') # read stereo landmarks
stereo.ldk
rm(ldk)
ldk <- importSM(path='data/stereo_ldk/stereo_output', class = c('Ldk'), panel = TRUE)
ldk <- importSM(path='data/stereo_ldk/stereo_output', class = c('Ldk'), panel = TRUE)
ldk
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
project.dir <- getwd()
source('R/dependencies.R')
# Go to the respective script
rstudioapi::navigateToFile("R/stereoMorph.R")
digitizeImage(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
digitizeImages(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
install.packages("devtools")
detach("package:shiny", unload = TRUE)
remove.packages("shiny")
library(devtools)
install_version("shiny", version = "1.4.0", repos = "http://cran.us.r-project.org")
project.dir <- getwd()
source('R/dependencies.R')
# Go to the respective script
rstudioapi::navigateToFile("R/stereoMorph.R")
digitizeImages(image.file='data/im', shapes.file='data/stereo_ldk/stereo_output',
landmarks.ref='data/stereo_ldk/landmarks_ref.txt'
) #curves.ref='data/curves_ref.txt'
